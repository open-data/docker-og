services:
#
# Proxy
#
  proxy:
    image: og-proxy--${PROJECT_ID}
    container_name: og-proxy--${PROJECT_ID}
    build:
      context: .
      dockerfile: docker/nginx/Dockerfile
      args:
        USER_ID: ${USER_ID:-0}
        GROUP_ID: ${GROUP_ID:-0}
      labels:
        projectID: ${PROJECT_ID}
    healthcheck:
      test: echo Docker! | sudo -S /bin/bash -c "service nginx status || exit 1"
      interval: 10s
      timeout: 5s
      retries: 6
      start_period: 10s
    working_dir: /var/ogproxy
    networks:
      og-local-network:
        ipv4_address: 172.25.${OCTET}.3
    env_file:
      - _config/docker/.docker.env
    environment:
      CONTAINER_ROLE: proxy
      APP_ROOT: /var/ogproxy
      PROJECT_ID: ${PROJECT_ID}
      PROJECT_PORT: ${PORT}
      ROOT_PASS: Docker!
    volumes:
      - ${PWD}/:/var/ogproxy
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./docker/config/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/config/nginx/conf:/etc/nginx/conf
      #- ./nginx:/var/log/nginx
    user: "${USER_ID:-0}:${GROUP_ID:-0}"
    ports:
      - 127.0.0.1:${PORT}:80
    expose:
      - 80
# END
# Proxy
# END
#
# Drupal
#
  drupal:
    image: og-drupal--${PROJECT_ID}
    container_name: og-drupal--${PROJECT_ID}
    build:
      context: .
      dockerfile: docker/drupal/Dockerfile
      args:
        USER_ID: ${USER_ID:-0}
        GROUP_ID: ${GROUP_ID:-0}
      labels:
        projectID: ${PROJECT_ID}
    healthcheck:
      test: echo Docker! | sudo -S /bin/bash -c "service nginx status || exit 1"
      interval: 10s
      timeout: 5s
      retries: 6
      start_period: 90s
    working_dir: /var/www/html
    networks:
      og-local-network:
        ipv4_address: 172.25.${OCTET}.6
    depends_on:
      proxy:
        condition: service_healthy
      postgres:
        condition: service_started
      solr:
        condition: service_healthy
    links:
      - proxy
      - postgres
      - solr
    env_file:
      - _config/docker/.docker.env
    environment:
      CONTAINER_ROLE: drupal
      PGHOST: postgres
      PGDATABASE: og_drupal_local
      PGUSER: homestead
      PGPASSWORD: secret
      WET_VERSION: v4.0.63
      GCWEB_VERSION: v13.3.0
      PATH: '$PATH:/var/www/html/drupal/vendor/bin'
      APP_ROOT: /var/www/html
      PROJECT_ID: ${PROJECT_ID}
      PROJECT_PORT: ${PORT}
      ROOT_PASS: Docker!
    volumes:
      - ${PWD}/:/var/www/html
      - ./docker/config/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/config/nginx/conf:/etc/nginx/conf
      - ~/.gitconfig:/etc/gitconfig:ro
      - /opt/tbs/docker/backup:/opt/tbs/docker/backup:ro
      # - ./nginx:/var/log/nginx
    user: "${USER_ID:-0}:${GROUP_ID:-0}"
    expose:
      - 8080
# END
# Drupal
# END
#
# CKAN Registry & Portal
#
  ckan:
    container_name: og-ckan--${PROJECT_ID}
    image: og-ckan--${PROJECT_ID}
    build:
      context: .
      dockerfile: docker/ckan/Dockerfile
      args:
        USER_ID: ${USER_ID:-0}
        GROUP_ID: ${GROUP_ID:-0}
      labels:
        projectID: ${PROJECT_ID}
    healthcheck:
      test: /srv/app/ckan/bin/uwsgi --connect-and-read 127.0.0.1:1717 || exit 1
      interval: 10s
      timeout: 5s
      retries: 6
      start_period: 90s
    working_dir: /srv/app
    networks:
      og-local-network:
        ipv4_address: 172.25.${OCTET}.7
    depends_on:
      proxy:
        condition: service_healthy
      postgres:
        condition: service_started
      solr:
        condition: service_healthy
      redis:
        condition: service_healthy
    links:
      - proxy
      - postgres
      - solr
    env_file:
      - _config/docker/.docker.env
    environment:
      CONTAINER_ROLE: ckan
      PGHOST: postgres
      PGDATABASE: postgres
      PGUSER: homestead
      PGPASSWORD: secret
      SSH_AUTH_SOCK: /ssh-agent
      APP_ROOT: /srv/app
      PATH: '$PATH:/srv/app/ckan/bin'
      PY_VERSION: 3.7
      PIP_VERSION: 23.2.1
      SETUP_TOOLS_VERSION: 44.1.0
      WET_VERSION: v4.0.63
      GCWEB_VERSION: v13.3.0
      PYTHONHTTPSVERIFY: 0
      PYTHONDONTWRITEBYTECODE: 1
      SSL_VERIFY: 0
      WERKZEUG_DEBUG_PIN: "off"
      PORTAL_CONFIG: /srv/app/ckan/portal.ini
      REGISTRY_CONFIG: /srv/app/ckan/registry.ini
      CKAN_INI: /srv/app/ckan/registry.ini
      TEST_INI: /srv/app/ckan/test.ini
      DATA_URI: https://open.canada.ca/data
      PROJECT_ID: ${PROJECT_ID}
      PROJECT_PORT: ${PORT}
      ROOT_PASS: Docker!
      LC_ALL: C.UTF-8
    volumes:
      - ${PWD}/:/srv/app
      - ./docker/config/ckan:/docker-entrypoint.d
      - ./docker/config/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/config/ckan/wsgi:/etc/ckan
      - ~/.gitconfig:/etc/gitconfig:ro
      - /opt/tbs/docker/backup:/opt/tbs/docker/backup:ro
    user: "${USER_ID:-0}:${GROUP_ID:-0}"
    expose:
      - 5001
      - 5002
# END
# CKAN Registry & Portal
# END
#
# Postgres
#
  postgres:
    container_name: og-postgres--${PROJECT_ID}
    image: og-postgres--${PROJECT_ID}
    build:
      context: .
      dockerfile: docker/postgres/Dockerfile
      args:
        USER_ID: ${USER_ID:-0}
        GROUP_ID: ${GROUP_ID:-0}
      labels:
        projectID: ${PROJECT_ID}
    restart: always
    healthcheck:
      test: pg_isready -U postgres || exit 1
      interval: 10s
      timeout: 5s
      retries: 6
      start_period: 10s
    networks:
      og-local-network:
        ipv4_address: 172.25.${OCTET}.9
    volumes:
      - ./postgres:/var/lib/postgresql/data
      - ./docker/config/postgres:/docker-entrypoint-initdb.d
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: homestead
      POSTGRES_PASSWORD: secret
      POSTGRES_HOST_AUTH_METHOD: trust
      PROJECT_ID: ${PROJECT_ID}
      PROJECT_PORT: ${PORT}
      ROOT_PASS: Docker!
    env_file:
      - _config/docker/.docker.env
    user: "${USER_ID:-0}:${GROUP_ID:-0}"
    ports:
      - 127.0.0.1:${DBPORT}:5432
    expose:
      - 5432
# END
# Postgres
# END
#
# Solr
#
  solr:
    container_name: og-solr--${PROJECT_ID}
    image: og-solr--${PROJECT_ID}
    restart: always
    build:
      context: .
      dockerfile: docker/solr/Dockerfile
      args:
        USER_ID: ${USER_ID:-0}
        GROUP_ID: ${GROUP_ID:-0}
      labels:
        projectID: ${PROJECT_ID}
    healthcheck:
      test: solr status || exit 1
      interval: 10s
      timeout: 5s
      retries: 6
      start_period: 45s
    working_dir: /opt/solr
    networks:
      og-local-network:
        ipv4_address: 172.25.${OCTET}.10
    depends_on:
      proxy:
        condition: service_healthy
    links:
      - proxy
    volumes:
      # Persisting CKAN Solr Cores
      - ./solr/ckan_registry:/var/solr/data/ckan_registry
      - ./solr/ckan_portal:/var/solr/data/ckan_portal
      - ./solr/drupal_ati:/var/solr/data/drupal_ati
      - ./solr/drupal_contractsa:/var/solr/data/drupal_contractsa
      # Persisting Django Solr Cores
      - ./solr/search_adminaircraft:/var/solr/data/search_adminaircraft
      - ./solr/search_ati:/var/solr/data/search_ati
      - ./solr/search_atimap:/var/solr/data/search_atimap
      - ./solr/search_briefingt:/var/solr/data/search_briefingt
      - ./solr/search_cafcip:/var/solr/data/search_cafcip
      - ./solr/search_contracts:/var/solr/data/search_contracts
      - ./solr/search_data:/var/solr/data/search_data
      - ./solr/search_dataprops:/var/solr/data/search_dataprops
      - ./solr/search_datastrategy:/var/solr/data/search_datastrategy
      - ./solr/search_experiment:/var/solr/data/search_experiment
      - ./solr/search_grants:/var/solr/data/search_grants
      - ./solr/search_hospitalityq:/var/solr/data/search_hospitalityq
      - ./solr/search_nap5:/var/solr/data/search_nap5
      - ./solr/search_opencanada:/var/solr/data/search_opencanada
      - ./solr/search_reclassification:/var/solr/data/search_reclassification
      - ./solr/search_qpnotes:/var/solr/data/search_qpnotes
      - ./solr/search_travela:/var/solr/data/search_travela
      - ./solr/search_travelq:/var/solr/data/search_travelq
      - ./solr/search_wrongdoing:/var/solr/data/search_wrongdoing
      # Persisting Drupal Solr Cores
      - ./solr/drupal_portal:/var/solr/data/drupal_portal
      # Persisting CKAN Test Solr Cores
      - ./solr/test__ckan_registry:/var/solr/data/test__ckan_registry
      - ./solr/test__ckan_portal:/var/solr/data/test__ckan_portal
      - ./solr/test__drupal_ati:/var/solr/data/test__drupal_ati
      - ./solr/test__drupal_contractsa:/var/solr/data/test__drupal_contractsa
      # Persisting Django Test Solr Cores
      - ./solr/test__search_adminaircraft:/var/solr/data/test__search_adminaircraft
      - ./solr/test__search_ati:/var/solr/data/test__search_ati
      - ./solr/test__search_atimap:/var/solr/data/test__search_atimap
      - ./solr/test__search_briefingt:/var/solr/data/test__search_briefingt
      - ./solr/test__search_cafcip:/var/solr/data/test__search_cafcip
      - ./solr/test__search_contracts:/var/solr/data/test__search_contracts
      - ./solr/test__search_data:/var/solr/data/test__search_data
      - ./solr/test__search_dataprops:/var/solr/data/test__search_dataprops
      - ./solr/test__search_datastrategy:/var/solr/data/test__search_datastrategy
      - ./solr/test__search_experiment:/var/solr/data/test__search_experiment
      - ./solr/test__search_grants:/var/solr/data/test__search_grants
      - ./solr/test__search_hospitalityq:/var/solr/data/test__search_hospitalityq
      - ./solr/test__search_nap5:/var/solr/data/test__search_nap5
      - ./solr/test__search_opencanada:/var/solr/data/test__search_opencanada
      - ./solr/test__search_reclassification:/var/solr/data/test__search_reclassification
      - ./solr/test__search_qpnotes:/var/solr/data/test__search_qpnotes
      - ./solr/test__search_travela:/var/solr/data/test__search_travela
      - ./solr/test__search_travelq:/var/solr/data/test__search_travelq
      - ./solr/test__search_wrongdoing:/var/solr/data/test__search_wrongdoing
      # Persisting Drupal Test Solr Cores
      - ./solr/test__drupal_portal:/var/solr/data/test__drupal_portal
    environment:
      CONTAINER_ROLE: solr
      SOLR_SSL_ENABLED: "false"
      SOLR_USER: solr
      SOLR_GROUP: solr
      PROJECT_ID: ${PROJECT_ID}
      PROJECT_PORT: ${PORT}
      ROOT_PASS: Docker!
    env_file:
      - _config/docker/.docker.env
    user: "${USER_ID:-0}:${GROUP_ID:-0}"
    expose:
      - 8983
# END
# Solr
# END
#
# Redis
#
  redis:
    container_name: og-redis--${PROJECT_ID}
    image: og-redis--${PROJECT_ID}
    build:
      context: .
      dockerfile: docker/redis/Dockerfile
      args:
        USER_ID: ${USER_ID:-0}
        GROUP_ID: ${GROUP_ID:-0}
      labels:
        projectID: ${PROJECT_ID}
    restart: always
    healthcheck:
      test: redis-cli info server || exit 1
      interval: 10s
      timeout: 5s
      retries: 6
      start_period: 10s
    working_dir: /data
    networks:
      og-local-network:
        ipv4_address: 172.25.${OCTET}.11
    volumes:
      - ./redis:/data
    environment:
      CONTAINER_ROLE: redis
      PROJECT_ID: ${PROJECT_ID}
      PROJECT_PORT: ${PORT}
      ROOT_PASS: Docker!
    env_file:
      - _config/docker/.docker.env
    user: "${USER_ID:-0}:${GROUP_ID:-0}"
    expose:
      - 6379
# END
# Redis
# END
#
# Django
#
  django:
    image: og-search--${PROJECT_ID}
    container_name: og-search--${PROJECT_ID}
    build:
      context: .
      dockerfile: docker/django/Dockerfile
      args:
        USER_ID: ${USER_ID:-0}
        GROUP_ID: ${GROUP_ID:-0}
      labels:
        projectID: ${PROJECT_ID}
    healthcheck:
      test: /var/ocs/django/bin/uwsgi --connect-and-read 127.0.0.1:1717 || exit 1
      interval: 10s
      timeout: 5s
      retries: 6
      start_period: 90s
    working_dir: /var/ocs
    networks:
      og-local-network:
        ipv4_address: 172.25.${OCTET}.12
    depends_on:
      proxy:
        condition: service_healthy
      postgres:
        condition: service_started
      solr:
        condition: service_healthy
      redis:
        condition: service_healthy
    links:
      - proxy
      - postgres
      - solr
    env_file:
      - _config/docker/.docker.env
    environment:
      CONTAINER_ROLE: search
      PGHOST: postgres
      PGDATABASE: postgres
      PGUSER: homestead
      PGPASSWORD: secret
      SSH_AUTH_SOCK: /ssh-agent
      PATH: '$PATH:/usr/local/lib'
      APP_ROOT: /var/ocs
      PY_VERSION: 3.9
      WET_VERSION: v4.0.63
      CDTS_VERSION: v4_0_28
      CDTS_GCWEB_VERSION: v4_0_31
      GCWEB_VERSION: v13.3.0
      PYTHONHTTPSVERIFY: 0
      PYTHONDONTWRITEBYTECODE: 1
      SSL_VERIFY: 0
      PROJECT_ID: ${PROJECT_ID}
      PROJECT_PORT: ${PORT}
      ROOT_PASS: Docker!
    volumes:
      - ${PWD}/:/var/ocs
      - ~/.gitconfig:/etc/gitconfig:ro
      - /opt/tbs/docker/backup:/opt/tbs/docker/backup:ro
    user: "${USER_ID:-0}:${GROUP_ID:-0}"
    expose:
      - 8000
# END
# Django
# END

networks:
  og-local-network:
    external: false
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.${OCTET}.0/24
          gateway: 172.25.${OCTET}.1
