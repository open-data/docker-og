version: "3"
services:
  traefik:
    image: traefik:v2.6
    container_name: og-traefik
    restart: always
    healthcheck:
      test: 
        - CMD
        - traefik
        - healthcheck
      interval: 10s
      timeout: 5s
      retries: 3
    ports:
      - 443:443
      - 80:80
      - 8080:8080
    volumes:
      # TODO: get mkcert certificates loaded into container...
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./docker/config/traefik/traefik.yml:/etc/traefik/traefik.yml
      - ./docker/config/nginx/certs:/usr/share/certs
  drupal:
    image: og-drupal
    container_name: og-drupal
    build:
      context: .
      dockerfile: docker/drupal/Dockerfile
      args:
        USER_ID: ${USER_ID:-0}
        GROUP_ID: ${GROUP_ID:-0}
    working_dir: /var/www/html
    networks:
      - og-traefik-network
      - og-local-network
    labels:
      traefik.enable: true
      traefik.port: 443
      traefik.docker.network: og-traefik-network
      traefik.http.routers.drupal.rule: Host(`open.local`)
      traefik.http.routers.drupal.entrypoints: websecure
      traefik.http.routers.drupal.tls: true
      traefik.http.routers.solr.tls.insecureSkipVerify: true
      traefik.http.routers.drupal.tls.cert: /usr/share/certs/open.local.pem
      traefik.http.routers.drupal.tls.key: /usr/share/certs/open.local-key.pem
    depends_on:
      traefik:
        condition: service_healthy
      postgres:
        condition: service_started
      solr:
        condition: service_started
      #- mailhog
    links:
      - traefik
      - postgres
      - solr
      #- mailhog
    env_file:
      - .docker.env
    environment:
      CONTAINER_ROLE: drupal
      PGHOST: postgres
      PGDATABASE: og_drupal_local
      PGUSER: homestead
      PGPASSWORD: secret
      SSH_AUTH_SOCK: /ssh-agent
      PATH: '$PATH:/var/www/html/drupal/vendor/bin'
      NGINX_UNAME: www-data
      APP_ROOT: /var/www/html
      SSL_CERT_FILE: /etc/ssl/mkcert/rootCA.pem
      SSL_CERT_DIR: /etc/ssl/mkcert
    volumes:
      - .:/var/www/html
      - ./docker/config/nginx/certs:/usr/share/certs
      - ./docker/config/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ~/.gitconfig:/etc/gitconfig:ro
      - ~/.ssh:/var/www/html/.ssh:ro
      - $SSH_AUTH_SOCK:/ssh-agent:ro
      #- ./nginx:/var/log/nginx      
      - $CA_LOCAL_ROOT:/etc/ssl/mkcert:ro
  ckan:
    container_name: og-ckan-registry
    image: openknowledge/ckan-base:2.8
    build:
      context: .
      dockerfile: docker/ckan/Dockerfile
      args:
        USER_ID: ${USER_ID:-0}
        GROUP_ID: ${GROUP_ID:-0}
    working_dir: /srv/app
    networks:
      - og-traefik-network
      - og-local-network
    depends_on:
      traefik:
        condition: service_healthy
      postgres:
        condition: service_started
      solr:
        condition: service_started
    links:
      - traefik
      - postgres
      - solr
    env_file:
      - .docker.env
    environment:
      CONTAINER_ROLE: ckan
      CKAN_ROLE: registry
      PGHOST: postgres
      PGDATABASE: postgres
      PGUSER: homestead
      PGPASSWORD: secret
      SSH_AUTH_SOCK: /ssh-agent
      NGINX_UNAME: ckan
      APP_ROOT: /srv/app
      PATH: '$PATH:/srv/app/ckan/registry/bin'
      PY_VERSION: 2.7
      PIP_VERSION: 19.2.1
      SETUP_TOOLS_VERSION: 36.1
      PYTHONHTTPSVERIFY: 0
      SSL_CERT_FILE: /etc/ssl/mkcert/rootCA.pem
      SSL_CERT_DIR: /etc/ssl/mkcert
      CKAN_CONFIG: /srv/app/ckan/default/ckan.ini
      PORTAL_CONFIG: /srv/app/ckan/portal/portal.ini
      REGISTRY_CONFIG: /srv/app/ckan/registry/registry.ini
    volumes:
      - ./docker/config/ckan:/docker-entrypoint.d
      - .:/srv/app
      - ./docker/config/nginx/certs:/usr/share/certs
      - ./docker/config/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ~/.gitconfig:/etc/gitconfig:ro
      - ~/.ssh:/srv/app/.ssh:ro
      - $SSH_AUTH_SOCK:/ssh-agent:ro
      - $CA_LOCAL_ROOT:/etc/ssl/mkcert:ro
    ports:
      - 5001:5000
  ckanapi:
    container_name: og-ckan-portal
    image: openknowledge/ckan-base:2.8
    build:
      context: .
      dockerfile: docker/ckan/Dockerfile
      args:
        USER_ID: ${USER_ID:-0}
        GROUP_ID: ${GROUP_ID:-0}
    working_dir: /srv/app
    networks:
      - og-traefik-network
      - og-local-network
    depends_on:
      traefik:
        condition: service_healthy
      postgres:
        condition: service_started
      solr:
        condition: service_started
    links:
      - traefik
      - postgres
      - solr
    env_file:
      - .docker.env
    environment:
      CONTAINER_ROLE: ckan
      CKAN_ROLE: portal
      PGHOST: postgres
      PGDATABASE: og_ckan_local
      PGUSER: homestead
      PGPASSWORD: secret
      SSH_AUTH_SOCK: /ssh-agent
      NGINX_UNAME: ckan
      APP_ROOT: /srv/app
      PATH: '$PATH:/srv/app/ckan/portal/bin'
      PY_VERSION: 2.7
      PIP_VERSION: 19.2.1
      SETUP_TOOLS_VERSION: 36.1
      PYTHONHTTPSVERIFY: 0
      SSL_CERT_FILE: /etc/ssl/mkcert/rootCA.pem
      SSL_CERT_DIR: /etc/ssl/mkcert
      CKAN_CONFIG: /srv/app/ckan/default/ckan.ini
      PORTAL_CONFIG: /srv/app/ckan/portal/portal.ini
      REGISTRY_CONFIG: /srv/app/ckan/registry/registry.ini
    volumes:
      - ./docker/config/ckan:/docker-entrypoint.d
      - .:/srv/app
      - ./docker/config/nginx/certs:/usr/share/certs
      - ./docker/config/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ~/.gitconfig:/etc/gitconfig:ro
      - ~/.ssh:/srv/app/.ssh:ro
      - $SSH_AUTH_SOCK:/ssh-agent:ro
      - $CA_LOCAL_ROOT:/etc/ssl/mkcert:ro
    ports:
      - 5002:5000
  postgres:
    container_name: og-postgres
    image: postgres:9.6
    restart: always
    networks:
      - og-local-network
    labels:
      traefik.enable: false
    volumes:
      - ./postgres:/var/lib/postgresql/data
      - ./docker/config/postgres:/docker-entrypoint-initdb.d
    environment:
      POSTGRES_DB: og_drupal_local
      POSTGRES_USER: homestead
      POSTGRES_PASSWORD: secret
      POSTGRES_HOST_AUTH_METHOD: trust
    env_file:
      - .docker.env
    user: "${USER_ID:-0}:${GROUP_ID:-0}"
    ports:
      - 15438:5432
  solr:
    container_name: og-solr
    image: solr
    restart: always
    build:
      context: .
      dockerfile: docker/solr/Dockerfile
    working_dir: /opt/solr
    networks:
      - og-traefik-network
      - og-local-network
    labels:
      traefik.enable: true
      traefik.port: 443
      traefik.docker.network: og-traefik-network
      traefik.http.routers.solr.rule: Host(`solr.open.local`)
      traefik.http.routers.solr.entrypoints: websecure
      traefik.http.routers.solr.tls: true
      traefik.http.routers.solr.tls.insecureSkipVerify: true
      traefik.http.routers.solr.tls.cert: /usr/share/certs/open.local.pem
      traefik.http.routers.solr.tls.key: /usr/share/certs/open.local-key.pem
    depends_on:
      traefik:
        condition: service_healthy
    links:
      - traefik
    volumes:
      - ./docker/config/solr/certs:/opt/solr/server/certs
      - ./docker/config/solr/certs/solr.p12:/etc/solr.p12
      - ./docker/config/nginx/certs:/usr/share/certs
      - ./solr/ckan:/var/solr/data/ckan
      - ./solr/core_ati:/var/solr/data/core_ati
      - ./solr/core_contracts:/var/solr/data/core_contracts
      - ./solr/core_grants:/var/solr/data/core_grants
      - ./solr/core_hospitalityq:/var/solr/data/core_hospitalityq
      - ./solr/core_inventory:/var/solr/data/core_inventory
      - ./solr/core_reclassification:/var/solr/data/core_reclassification
      - ./solr/core_travela:/var/solr/data/core_travela
      - ./solr/core_travelq:/var/solr/data/core_travelq
      - ./solr/core_wrongdoing:/var/solr/data/core_wrongdoing
      - ./solr/drupal_content:/var/solr/data/drupal_content
      - ./docker/config/solr/cores:/var/solr/local_data
    environment:
      - CONTAINER_ROLE=solr
      - NGINX_UNAME=root
      - SOLR_SSL_ENABLED=true
      - SOLR_SSL_KEY_STORE=/etc/solr.p12
      - SOLR_SSL_KEY_STORE_PASSWORD=changeit
      - SOLR_SSL_TRUST_STORE=/etc/solr.p12
      - SOLR_SSL_TRUST_STORE_PASSWORD=changeit
      - SOLR_SSL_NEED_CLIENT_AUTH=false
      - SOLR_SSL_WANT_CLIENT_AUTH=false
      - SOLR_SSL_CHECK_PEER_NAME=true
      - SOLR_SSL_KEY_STORE_TYPE=PKCS12
      - SOLR_SSL_TRUST_STORE_TYPE=PKCS12
    user: "root:root"
    ports:
      - 8981:8983
  # Commented out due to failed nginx bindings
  # mailhog:
  #   container_name: og-mailhog
  #   image: mailhog/mailhog:v1.0.0
  #   ports:
  #     - "1025:1025"
  #     - "8025:8025"

volumes:
  postgres:
    driver: "local"
  solr:
    driver: "local"

networks:
  og-traefik-network:
    external : true
  og-local-network:
    external : false